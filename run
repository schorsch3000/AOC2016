#!/usr/bin/php7.0
<?php

include __DIR__.'/vendor/autoload.php';
chdir(__DIR__);
if ($_SERVER['argc'] !== 3) {
    echo <<<EOF
Usage: {$_SERVER['argv'][0]} <daynum> <partnum>

EOF;
    die(1);
}

$day = (int)$_SERVER['argv'][1];
if ($day < 1 or $day > 25) {
    echo("Day out of Range\n");
    die(2);
}
$part = (int)$_SERVER['argv'][2];
$dayDir = 'Solution/Day' . $day;
if (!is_dir($dayDir)) {
    mkdir($dayDir,0777,true);
    echo "Created DayDir\n";
}

chdir($dayDir);
foreach (glob(__DIR__.'/stubs/*') as $stubPath) {
    $stubFilename = basename($stubPath);
    if (!is_file($stubFilename)) {
        $search = ['{DAY}'];
        $replace = [$day];
        file_put_contents($stubFilename, str_replace($search, $replace, file_get_contents($stubPath)));
        echo "Created $stubFilename\n";
    }
}
$conf = Symfony\Component\Yaml\Yaml::parse(file_get_contents('data.yml'));
$class = "\\AdventOfCode\\Solution\\Day${day}\\Part$part";
$numTests = count($conf['testdata']['part' . $part]);
$testNum = 0;
$mem = memory_get_peak_usage(1);
foreach ((array)$conf['testdata']['part' . $part] as $input => $output) {
    $testNum++;
    echo "Testing test# $testNum / $numTests";
    $testObj=new $class($input);
    $result = $testObj->solve();
    if ($result === $output) {
        echo " OKAY!\n";
    } else {
        echo " ERROR!\n";
        echo "input            : ", $input, "\nexpected output  : ", $output, "\nreal output      : $result\n";
        die(1);
    }
}

if (isset($conf['data' . $part])) {
    $data = $conf['data' . $part];
} else {
    $data = $conf['data'];
}

$time = microtime(1);
$testObj=new $class($data);

echo "\n\nSolution: ", $testObj->solve(), "\n";
echo "time: ", round(microtime(1) - $time, 3), "s\n";
$mem = memory_get_peak_usage(1) - $mem;
if($mem > 256) {
    $unit = 'b';
    if ($mem > 1500) {
        $mem /= 1024;
        $unit = 'kb';
    }
    if ($mem > 1500) {
        $mem /= 1024;
        $unit = 'mb';
    }
    if ($mem > 1500) {
        $mem /= 1024;
        $unit = 'gb';
    }
    $mem = round($mem, 3);
    echo "mem : ", $mem, $unit, "\n\n";
}